// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Venue {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  title         String        @db.VarChar(255)
  published     Boolean       @default(false)
  userId        String
  images        String[]
  website       String?
  user          User          @relation(fields: [userId], references: [id])
  contactNumber String?
  fullAddress   String
  streetName    String?
  locality      String?
  area          String?
  country       String?
  postalCode    String?
  lat           Float?
  lng           Float?
  venueCategory String?
  openingTime   OpeningTime[] 
  bookings      Booking[]
}




model OpeningTime {
  id            String     @id @default(cuid())
  dayOfWeek     Int // 0 for Sunday, 1 for Monday, etc.
  openTime      DateTime?  @db.Time(0) // nullable in case there venue is closed
  closeTime     DateTime?  @db.Time(0) // nullable in case there venue is closed
  midOpenTime   DateTime?  @db.Time(0) // nullable in case there is no mid-break
  midCloseTime  DateTime?  @db.Time(0) // nullable in case there is no mid-break
  venue         Venue      @relation(fields: [venueId], references: [id])
  venueId       String
  BookableSlots DateTime[]
  Artist        Artist?    @relation(fields: [artistId], references: [id])
  artistId      String?
  // bookings      Booking[] 

}

enum Role {
  User
  VenueOwner
  Artist
  Admin
}

model Booking {
  id           String     @id @default(cuid())
  date         DateTime
  start        DateTime
  end          DateTime
  venueTitle   String
  venue        Venue      @relation(fields: [venueId], references: [id])
  venueId      String
  artist       Artist?    @relation(fields: [artistId], references: [id])
  artistId     String?
  // openingTime  OpeningTime?  @relation(fields: [openingTimeId], references: [id])
  // openingTimeId String
}

model Artist {
  id              String        @id @default(cuid())
  profileImg      String?
  description     String? 
  genres          String[]
  stageName       String?
  address         String?
  contactNumber   String?
  facebookLink    String?
  instagramLink   String?
  youtubeLink     String?
  websiteLink     String?
  avaiableForHire String?
  openingTimes    OpeningTime[]
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @unique
  streetName      String?
  locality        String?
  area            String?
  country         String?
  postalCode      String?
  contactEmail    String?
  bookings        Booking[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  venue         Venue[]
  role          Role      @unique @default(User)
  artist        Artist?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}