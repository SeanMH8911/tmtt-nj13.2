// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Venue {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String   @db.VarChar(255)
  published     Boolean  @default(false)
  userId        String
  images        String[]
  user          User     @relation(fields: [userId], references: [id])
  fullAddress   String
  streetName    String?
  locality      String?
  Area          String?
  Country       String?
  postalCode    String?
  lat           Float?
  lng           Float?
  venueCategory String?
  // openingTimes  OpeningTime[]
}

// model OpeningTime {
//   id           String    @id @default(cuid())
//   dayOfWeek    Int // 0 for Sunday, 1 for Monday, etc.
//   openTime     DateTime
//   closeTime    DateTime
//   midOpenTime  DateTime? // nullable in case there is no mid-break
//   midCloseTime DateTime? // nullable in case there is no mid-break
//   venue        Venue     @relation(fields: [venueId], references: [id])
//   venueId      String
// }

enum Role {
  User
  VenueOwner
  Artist
  Admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Venue         Venue[]
  role          Role      @unique @default(User)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
